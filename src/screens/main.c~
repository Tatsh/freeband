#include "../freeband.h"
#include "../graphics/graphics.h"
#include "instruments.h"
#include "main.h"

bool nonGame;
bool online;
bool options;

char bgTexture[] = "GameData/themes/default/global/bg.png";
char logoTexture[] = "GameData/themes/default/screenStart/banner.png";
char mainSelector[] = "GameData/themes/default/screenStart/selector.png";

/* Note:
   Negative is to the left, positive is to the right when horizontal (x)
   Negative is to the top, positive is to the bottom when vertical (y)
   Negative is to the outside, positive is going inside (z)
   Order of corners: top-left, bottom-left, bottom-right, top-right */
GLfloat logoVertexX[] = { -1.25f, -1.25f, 1.26f, 1.26f }; /* Logo position */
GLfloat logoVertexY[] = {  -1.0f,   0.0f,  0.0f, -1.0f };
GLfloat mSelectorAlpha = 0.3f;
GLfloat mSelectorVertexX[] = { 0.0f, 0.0f, 1.3f, 1.3f }; /* Main menu selector's default position */
GLfloat mSelectorVertexY[] = {  0.18f, 0.0f, 0.0f, 0.18f };

/* Text positions, all are false italic. These take FOREVER!
   There is NO way to calculate these for now, all depends on mechanics of the font, specific to EVERY font */
GLfloat text_SinglePlayerX[] = { 0.09f, 0.07f, 1.22f, 1.24f }; /* SINGLE PLAYER */
GLfloat text_SinglePlayerY[4];
GLfloat text_MultiplayerX[]  = { 0.11f, 0.09f, 1.18f, 1.2f }; /* MULTIPLAYER */
GLfloat text_OnlineX[] = { 0.36f, 0.34f, 0.94f, 0.96f }; /* ONLINE */
GLfloat text_OptionsX[] = { 0.28f, 0.26f, 0.98f, 1.0f };
GLfloat text_QuitX[] = { 0.40f, 0.38f, 0.8f, 0.82f };

GLfloat text_SinglePlayer_hl[4];
GLfloat text_Multiplayer_hl[4];
GLfloat text_Online_hl[4];
GLfloat text_Options_hl[4];
GLfloat text_Quit_hl[4];

GLuint menuSelection = 0;

tMenuState menuState;

GLvoid handleMainMenu() {

  switch (menuSelection) {

    case 0:
#ifdef __DEBUG__
      fprintf(stdout, "Starting single player mode.\n");
#endif
      nPlayers = 1;
      menuQuit = true; /* We are leaving the menu */
      loading = true; /* We are currently loading textures */
      clearScreen(); /* Clean up screen */
#ifdef __DEBUG__
      fprintf(stdout, "Deleted all screen mainMenu elements.\nLoading single player screenInstruments elements...\n");
#endif
      currentScreen.mainMenu = loading = menuQuit = false;
      nonGame = false; /* We are not going to online mode, options menu, or going to quit */
      currentScreen.instruments = instrument.guitar = true; /* We set guitar to default selection, does not affect highlight */

    case 1:
      fprintf(stdout, "Starting multiplayer mode.\n");
      break;

    case 2:
      fprintf(stdout, "Starting online mode.\n");
      nonGame = true;
      online = true;
      break;

    case 3:
      fprintf(stdout, "Going to options menu.\n");
      nonGame = true;
      options = true;
      break;

    case 4:
      quitGame(0);
      break;

    default:
      break;
  }

  return;
}

GLvoid setMainMenuState(GLuint selectID) {
  GLuint i;

  switch(selectID) {
    case 0: /* Single player */
      menuState.single = true;
      menuState.multiplayer = false;
      menuState.online = false;
      menuState.options = false;
      menuState.quit = false;
      for ( i = 0; i < 4; i++ ) { /* Highlight */
        text_Quit_hl[i] = colour_blue_7CA4F6[i]; /* From down arrow */
        text_Multiplayer_hl[i] = colour_blue_7CA4F6[i]; /* From up arrow */
        text_SinglePlayer_hl[i] = 1.0f;
    }
#ifdef __DEBUG__
    fprintf(stdout, "Selected single player mode.\n");
#endif
    break;

    case 1:  /* Multiplayer */
      menuState.single = false;
      menuState.multiplayer = true;
      for ( i = 0; i < 4; i++ ) {
        text_SinglePlayer_hl[i] = colour_blue_7CA4F6[i];
        text_Online_hl[i] = colour_blue_7CA4F6[i];
        text_Multiplayer_hl[i] = 1.0f;
      }
#ifdef __DEBUG__
      fprintf(stdout, "Selected multiplayer player mode.\n");
#endif
      break;

    case 2: /* Online */
      menuState.single = false;
      menuState.multiplayer = false;
      menuState.online = true;
      for ( i = 0; i < 4; i++ ) {
        text_Multiplayer_hl[i] = colour_blue_7CA4F6[i];
        text_Options_hl[i] = colour_blue_7CA4F6[i];
        text_Online_hl[i] = 1.0f;
      }
#ifdef __DEBUG__
      fprintf(stdout, "Selected online mode.\n");
#endif
      break;

    case 3: /* Options */
      menuState.online = false;
      menuState.options = true;
      for ( i = 0; i < 4; i++ ) {
        text_Online_hl[i] = colour_blue_7CA4F6[i];
        text_Quit_hl[i] = colour_blue_7CA4F6[i];
        text_Options_hl[i] = 1.0f;
      }
#ifdef __DEBUG__
      fprintf(stdout, "Selected options menu.\n");
#endif
      break;

    case 4: /* Quit */
      menuState.options = false;
      menuState.quit = true;
      for ( i = 0; i < 4; i++ ) {
        text_Options_hl[i] = colour_blue_7CA4F6[i];
        text_SinglePlayer_hl[i] = colour_blue_7CA4F6[i];
        text_Quit_hl[i] = 1.0f;
      }
#ifdef __DEBUG__
      fprintf(stdout, "Selected to quit.\n");
#endif
      break;

      default:
        break;
  }

  return;
}

GLvoid setMainImages() {
  GLuint i = 0;

  /* Set 'SINGLE PLAYER' to be highlighted */
  for ( i = 0; i < 4; i++ ) {
    text_SinglePlayer_hl[i] = 1.0f;
    text_Multiplayer_hl[i] = colour_blue_7CA4F6[i];
    text_Online_hl[i] = colour_blue_7CA4F6[i];
    text_Options_hl[i] = colour_blue_7CA4F6[i];
    text_Quit_hl[i] = colour_blue_7CA4F6[i];
  }
  
  if ((texture[0] = loadTexture(bgTexture, 0)) == -1)
    fprintf(stderr, "Unable to load texture: %s.\n", bgTexture);

  if ((texture[1] = loadTexture(logoTexture, 1)) == -1)
    fprintf(stderr, "Unable to load texture: %s.\n", logoTexture);
  
  if ((texture[2] = loadTexture(mainSelector, 2)) == -1)
    fprintf(stderr, "Unable to load texture: %s.\n", mainSelector);
  
  return;
}

GLvoid setMainText() {
  TTF_Font *font;
  font = TTF_OpenFont(defaultFont, 72); /* 72 seems to be the best size for this font */
  if (!font)
    fprintf(stderr, "SDL_ttf: TTF_OpenFont() response: %s\n", TTF_GetError());
  else {
    GLuint single, multiplayer, online, options, quit;
    
    single = loadText("SINGLE PLAYER", font, white, 0); /* We ALMOST ALWAYS load text as white to start */
    multiplayer = loadText("MULTIPLAYER", font, white, 1);
    online = loadText("ONLINE", font, white, 2);
    options = loadText("OPTIONS", font, white, 3);
    quit = loadText("QUIT", font, white, 4); /* Currently a nasty artifact to the right */
  }

  if (font)
    TTF_CloseFont(font); /* Clean up */

  return;
}

GLvoid screenMain() {
  glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, texture[0] );
  positionTexture(fillBGVertexX, fillBGVertexY, defVertexZ);

  glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, texture[1] );
  positionTexture(logoVertexX, logoVertexY, defVertexZ);

  glColor4f(1.0, 1.0f, 1.0f, mSelectorAlpha);
  glBindTexture( GL_TEXTURE_2D, texture[2] ); /* Use selector's default position */
  positionTexture(mSelectorVertexX, mSelectorVertexY, defVertexZ);
  
  /* Text positions */
  glColor4f(text_SinglePlayer_hl[0], text_SinglePlayer_hl[1], text_SinglePlayer_hl[2], text_SinglePlayer_hl[3]);
  glBindTexture( GL_TEXTURE_2D, text[0] );
  positionTexture(text_SinglePlayerX, text_SinglePlayerY, defVertexZ);

  glColor4f(text_Multiplayer_hl[0], text_Multiplayer_hl[1], text_Multiplayer_hl[2], text_Multiplayer_hl[3]);
  glBindTexture( GL_TEXTURE_2D, text[1] );
  positionTexture(text_MultiplayerX, text_MultiplayerY, defVertexZ);

  glColor4f(text_Online_hl[0], text_Online_hl[1], text_Online_hl[2], text_Online_hl[3]); 
  glBindTexture( GL_TEXTURE_2D, text[2] );
  positionTexture(text_OnlineX, text_OnlineY, defVertexZ);

  glColor4f(text_Options_hl[0], text_Options_hl[1], text_Options_hl[2], text_Options_hl[3]);
  glBindTexture( GL_TEXTURE_2D, text[3] );
  positionTexture(text_OptionsX, text_OptionsY, defVertexZ);
  
  glColor4f(text_Quit_hl[0], text_Quit_hl[1], text_Quit_hl[2], text_Quit_hl[3]);
  glBindTexture( GL_TEXTURE_2D, text[4] );
  positionTexture(text_QuitX, text_QuitY, defVertexZ);

  if (mSelectorAlpha < 0.5)
    mSelectorAlpha += 0.005f;

  return;
}
