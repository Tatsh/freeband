#include "../freeband.h"
#include "../graphics/graphics.h"
#include "../graphics/text.h"
#include "difficulty.h"
#include "main.h"

bool diffEasy = true; /* Read from user's last setting in preferences file later */
bool diffMedium, diffHard, diffExpert;

char pSelection[] = "GameData/themes/default/screenDifficulty/selection.png";

GLfloat screenDifficulty_selectionX[4];
GLfloat screenDifficulty_selectionY[4] = { 0.0f, DIFFHT, DIFFHT, 0.0f };

GLfloat tEasyX[4];
GLfloat tEasyY[] = { 0.0f, DIFFHT, DIFFHT, 0.0f };
GLfloat tMediumX[4];
GLfloat tMediumY[4];
GLfloat tHardX[4];
GLfloat tHardY[4];
GLfloat tExpertX[4];
GLfloat tExpertY[4];

GLuint easy, medium, hard, expert;
GLuint bg, selection;

GLvoid screenDifficulty_buffer() {
  GLfloat width;
  GLuint i;
  
  if ((bg = graphics_loadTexture(bgTexture, 0)) < 0)
    fprintf(stderr, "Unable to load texture: %s.\n", bgTexture);
  
  if ((selection = graphics_loadTexture(pSelection, 1)) == -1)
    fprintf(stderr, "Unable to load texture: %s.\n", pSelection);
  width = graphics_scaleTextureWidth(505, 85, 0.1);
  for ( i = 0; i < 2; i++ ) screenDifficulty_selectionX[i] = graphics_centreAtX(0.0f, width);
  for ( i = 2; i < 4; i++ ) screenDifficulty_selectionX[i] = screenDifficulty_selectionX[i-2] + width;
  
  TTF_Font *bitstream;
  bitstream = TTF_OpenFont(path_bold_bitstreamVeraSans, DEFAULT_TEXT_PT);
  easy = text_load("EASY", bitstream, white, 0);
  width = graphics_scaleTextureWidth(text_getWidth("EASY", bitstream, DEFAULT_TEXT_PT),
                                     text_getHeight("EASY", bitstream, DEFAULT_TEXT_PT),
                                     DIFFHT);
  for ( i = 0; i < 2; i++ ) tEasyX[i] = graphics_centreAtX(0.0f, width);
  for ( i = 2; i < 4; i++ ) tEasyX[i] = tEasyX[i-2] + width;
    
  medium = text_load("MEDIUM", bitstream, white, 1);
  width = graphics_scaleTextureWidth(text_getWidth("MEDIUM", bitstream, DEFAULT_TEXT_PT),
                                     text_getHeight("MEDIUM", bitstream, DEFAULT_TEXT_PT),
                                     DIFFHT);
  for ( i = 0; i < 2; i++ ) tMediumX[i] = graphics_centreAtX(0.0f, width);
  for ( i = 2; i < 4; i++ ) tMediumX[i] = tMediumX[i-2] + width;
  for ( i = 0; i < 4; i++ ) tMediumY[i] = tEasyY[i] + DIFFHT;
    
  hard = text_load("HARD", bitstream, white, 2);
  width = graphics_scaleTextureWidth(text_getWidth("HARD", bitstream, DEFAULT_TEXT_PT),
                                     text_getHeight("HARD", bitstream, DEFAULT_TEXT_PT),
                                     DIFFHT);
  for ( i = 0; i < 2; i++ ) tHardX[i] = graphics_centreAtX(0.0f, width);
  for ( i = 2; i < 4; i++ ) tHardX[i] = tHardX[i-2] + width;
  for ( i = 0; i < 4; i++ ) tHardY[i] = tMediumY[i] + DIFFHT;
    
  expert = text_load("EXPERT", bitstream, white, 3);
  width = graphics_scaleTextureWidth(text_getWidth("EXPERT", bitstream, DEFAULT_TEXT_PT),
                                     text_getHeight("EXPERT", bitstream, DEFAULT_TEXT_PT),
                                     DIFFHT);
  for ( i = 0; i < 2; i++ ) tExpertX[i] = graphics_centreAtX(0.0f, width);
  for ( i = 2; i < 4; i++ ) tExpertX[i] = tExpertX[i-2] + width;
  for ( i = 0; i < 4; i++ ) tExpertY[i] = tHardY[i] + DIFFHT;
  
  if (bitstream)
    TTF_CloseFont(bitstream);
  
  return;
}

GLvoid screenDifficulty() {
  glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, bg );
  graphics_positionTexture(fillBGVertexX, fillBGVertexY, defVertexZ);
  
  if (diffEasy)
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  else
    glColor4f(0.5f, 0.5f, 0.5f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, easy );
  graphics_positionTexture(tEasyX, tEasyY, defVertexZ);
  
  glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  if (diffMedium)
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  else
    glColor4f(0.5f, 0.5f, 0.5f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, medium );
  graphics_positionTexture(tMediumX, tMediumY, defVertexZ);
  
  if (diffHard)
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  else
    glColor4f(0.5f, 0.5f, 0.5f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, hard );
  graphics_positionTexture(tHardX, tHardY, defVertexZ);

  if (diffExpert)
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  else
    glColor4f(0.5f, 0.5f, 0.5f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, expert );
  graphics_positionTexture(tExpertX, tExpertY, defVertexZ);
  
  glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
  glBindTexture( GL_TEXTURE_2D, selection );
  graphics_positionTexture(diffSelectionX, diffSelectionY, defVertexZ);

  return;
}
